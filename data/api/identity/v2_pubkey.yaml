# Copyright 2016 OpenMarket Ltd
# Copyright 2019 The Matrix.org Foundation C.I.C.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
openapi: 3.1.0
info:
  title: Matrix Identity Service Public Key API
  version: 2.0.0
paths:
  "/pubkey/{keyId}":
    get:
      summary: Get a public key.
      description: Get the public key for the passed key ID.
      operationId: getPubKeyV2
      parameters:
        - in: path
          name: keyId
          required: true
          description: |-
            The ID of the key. This should take the form algorithm:identifier
            where algorithm identifies the signing algorithm, and the identifier
            is an opaque string.
          example: ed25519:0
          schema:
            type: string
      responses:
        "200":
          description: The public key exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  public_key:
                    type: string
                    description: Unpadded Base64 encoded public key.
                required:
                  - public_key
              examples:
                response:
                  value: {
                    "public_key": "VXuGitF39UH5iRfvbIknlvlAVKgD1BsLDMvBf0pmp7c"
                  }
        "404":
          description: The public key was not found.
          content:
            application/json:
              schema:
                $ref: ../client-server/definitions/errors/error.yaml
              examples:
                response:
                  value: {
                    "errcode": "M_NOT_FOUND",
                    "error": "The public key was not found"
                  }
  /pubkey/isvalid:
    get:
      summary: Check whether a long-term public key is valid.
      description: |-
        Check whether a long-term public key is valid. The response should always
        be the same, provided the key exists.
      operationId: isPubKeyValidV2
      parameters:
        - in: query
          name: public_key
          required: true
          description: The unpadded base64-encoded public key to check.
          example: VXuGitF39UH5iRfvbIknlvlAVKgD1BsLDMvBf0pmp7c
          schema:
            type: string
      responses:
        "200":
          description: The validity of the public key.
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    description: Whether the public key is recognised and is currently valid.
                required:
                  - valid
              examples:
                response:
                  value: {
                    "valid": true
                  }
  /pubkey/ephemeral/isvalid:
    get:
      summary: Check whether a short-term public key is valid.
      description: Check whether a short-term public key is valid.
      operationId: isEphemeralPubKeyValidV2
      parameters:
        - in: query
          name: public_key
          required: true
          description: The unpadded base64-encoded public key to check.
          example: VXuGitF39UH5iRfvbIknlvlAVKgD1BsLDMvBf0pmp7c
          schema:
            type: string
      responses:
        "200":
          description: The validity of the public key.
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    description: Whether the public key is recognised and is currently valid.
                required:
                  - valid
              examples:
                response:
                  value: {
                    "valid": true
                  }
servers:
  - url: "{protocol}://{hostname}{basePath}"
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      hostname:
        default: localhost:8090
      basePath:
        default: /_matrix/identity/v2
